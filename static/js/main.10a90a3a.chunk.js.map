{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","style","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.10a90a3a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react'\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n\nimport styles from './Cards.module.css';\n \nconst Cards = ({data :{confirmed, recovered, deaths, lastUpdate}}) => {\n    \n    if (!confirmed){\n        return 'Loading....'\n    }\n\n    return (\n        <div className={styles.container}>\n            <Grid container spacing={3} justify=\"center\">\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp start={0} end={confirmed.value} duration={2.0} separator=\".\" />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of Active Cases</Typography>\n                    </CardContent>\n                </Grid>\n\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp start={0} end={recovered.value} duration={2.0} separator=\".\" />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Recoveries from Covid-19</Typography>\n                    </CardContent>\n                </Grid>\n\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp start={0} end={deaths.value} duration={2.0} separator=\".\" />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of Deaths by covid-19</Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Cards;","import axios from 'axios'\n\nconst url = \"https://covid19.mathdro.id/api\"\n\nexport const fetchData = async(country) => {\n    let changeableUrl = url;\n    if(country){\n        changeableUrl = `${url}/countries/${country}`\n    }\n    try {\n        const {data: {confirmed, recovered, deaths, lastUpdate}} = await axios.get(changeableUrl);\n\n        return  {confirmed,recovered,deaths,lastUpdate}\n\n    } catch (error) {\n       console.log(error) \n    }\n}\n\nexport const fetchDailyData = async () => {\n    try {\n        const {data} = await axios.get(`${url}/daily`)\n        \n        const modifiedData = data.map((dailyData)=> ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date:dailyData.reportDate,\n        }))\n\n        return modifiedData\n\n    } catch (error) {\n        \n    }\n}\n\n\nexport const fetchCountries = async() => {\n    try {\n        const {data: {countries}} = await axios.get(`${url}/countries`)\n\n        return countries.map((country)=>country.name)\n    } catch (error) {\n        console.log(error)\n    }\n}","import React, {useState, useEffect} from 'react'\nimport {fetchDailyData} from '../../api'\nimport {Line, Bar} from 'react-chartjs-2'\n\nimport styles from './Chart.module.css'\n\nconst Chart = ({data:{confirmed, deaths, recovered}, country}) => {\n    const [dailyData, setDailyData] = useState({});\n\n    useEffect(() =>{\n        const fetchAPI = async()=>{\n            setDailyData(await fetchDailyData())\n        }\n        \n        fetchAPI();\n    }, [setDailyData])\n    \n    const lineChart = (\n      dailyData.length\n      ? (\n      <Line\n        data={{\n            labels: dailyData.map(({date})=> date),\n            datasets: [{\n                data:dailyData.map(({confirmed})=> confirmed),\n                label: 'Infected',\n                borderColor:'#3333ff',\n                fill:true\n            },{\n                data:dailyData.map(({deaths})=> deaths),\n                label: 'Deaths',\n                borderColor:'red',\n                backgroundColor: 'pink',\n                fill:true\n\n            }],\n        }}\n      />) : null\n    );\n    // {confirmed? console.log(confirmed.value): console.log(\"yeet\")};\n    const barChart = (\n        confirmed\n        ? (\n            <Bar\n                data={{\n                    labels: ['Infected', 'Recovered', 'Deaths'],\n                    datasets: [{\n                        label: 'People',\n                        backgroundColor: ['orange','green', 'red'],\n                        data: [confirmed.value, recovered.value, deaths.value],\n                    }],\n                }}\n                options={{\n                    legend: {display:false},\n                    title: {display:true, text: `Current state in ${country}`}\n                }}\n            />\n        ): null\n    )\n\n    return (\n        <div className={styles.container}>\n            {country ? barChart: lineChart}\n        </div>\n    )\n}\n\nexport default Chart;","import React, {useState, useEffect} from 'react'\nimport{NativeSelect, FormControl} from '@material-ui/core'\n\nimport style from './CountryPicker.module.css'\nimport {fetchCountries} from '../../api/'\n\nconst CountryPicker = ({handleCountryChange}) => {\n    const  [fetchedCountries, setFetchedCountries] = useState([])\n\n    useEffect(()=>{\n        const fetchAPI = async() => {\n            setFetchedCountries(await fetchCountries())\n        }\n        fetchAPI()\n    }, [setFetchedCountries]);\n\n    return (\n        <FormControl className={style.formControl}>\n            <NativeSelect defaultValue=\"\" onChange={(e)=> handleCountryChange(e.target.value)}>\n                <option value=\"global\">Global</option>\n                {fetchedCountries.map((country, i)=> <option key={i} value={country}>{country}</option>)}\n            </NativeSelect>\n        </FormControl>\n    )\n}\n\nexport default CountryPicker;","import React from 'react'\n\nimport {Cards, Chart, CountryPicker} from './components'\nimport styles from './App.module.css'\nimport {fetchData} from './api'\n\nclass App extends React.Component{\n\n    state = {\n        data : {},\n        country: ''\n    }\n\n    async componentDidMount(){\n        const fetchedData = await fetchData();\n        this.setState({data: fetchedData})\n    }\n\n    handleCountryChange = async (country) =>{\n        const fetchedData = await fetchData(country);\n        this.setState({data: fetchedData, country: country} )\n    }\n\n    render(){\n        const {data, country} = this.state;\n        return (\n            <div className={styles.container}>\n                <Cards data={data}/>\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\n                <Chart data={data} country={country}/>\n            </div>\n        )\n    }\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\n\nReactDOM.render(<App/>, document.getElementById('root'))","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};"],"sourceRoot":""}